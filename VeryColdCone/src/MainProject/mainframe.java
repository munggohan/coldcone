/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainProject;

import java.awt.Color;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Arevalo
 */
public class mainframe extends javax.swing.JFrame {

    /**
     * Creates new form mainframe
     */
    private static String DRIVERCLASS_DBCONNECTION = "com.mysql.jdbc.Driver";
    private static String URL_DBCONNECTION = "jdbc:mysql://localhost:3306/coldcone";
    private static String USERNAME_DBCONNECTION = "root";
    private static String PASSWORD_DBCONNECTION = "asdfjklh";
    public String sup = null;
    int itemnotemp, totalQuantity;
    String itemnametemp;
    int itemintemp;
      Connection conn = null;
    ResultSet rs = null;
    int id = 0;
    public String pass = null;
    PreparedStatement pst = null;
    Statement st;
    int amnt;
    String prodNo, prodName, prodamnt, ade = null, add;
    int prodPrice;
    int ad = 0;
    ArrayList<Integer> quantityIngredients = new ArrayList<>();
    ArrayList<String> typeIngredients = new ArrayList<>();
    int cone, cup, cream, additional, plasticSpoon, ice, cup16oz, coke, domeLid, juiceStraw, tissue, coffee, choco;
    int number, last;
    public mainframe() {
        setTitle("Cold Cone");
        setResizable(false);
        initComponents();
        initialize();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(mainframe.EXIT_ON_CLOSE);
       orderTable();
       grandTotal();
    }
    //shiftonetable
    private void adminTable(){
        String sql = "select * from shiftone";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            Statement st =(Statement) conn.createStatement();
            rs = st.executeQuery(sql);
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
            jTable1.revalidate();
            jTable1.repaint();
        } catch (SQLException ex) {
        }
        jButton15.setVisible(true);
    }
    private void userTable(){
        String sql = "select ItemNo, ItemName, ItemIn from shiftone";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            Statement st =(Statement) conn.createStatement();
            rs = st.executeQuery(sql);
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
            jTable1.revalidate();
            jTable1.repaint();
        }  catch (SQLException ex) {
        }
        jButton15.setVisible(false);
    }
   public void updateTableone(){
        if(this.sup.equals("ADMIN")){
            adminTable();
        }else if(this.sup.equals("USER")){
            userTable();
        }else {
            JOptionPane.showMessageDialog(null, "error "+this.sup);
        }
    }

    //Frame icon
     private void initialize() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("CCL.png")));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        totalTF = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        orderTbl = new javax.swing.JTable();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton18 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        chocodipBtn = new javax.swing.JButton();
        dipntoppingsBtn = new javax.swing.JButton();
        cokefloatBtn = new javax.swing.JButton();
        chocofloatBtn = new javax.swing.JButton();
        coffeefloatBtn = new javax.swing.JButton();
        additionalBtn = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Inventory", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Eras Bold ITC", 0, 18), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(null);

        jButton10.setBackground(new java.awt.Color(0, 255, 204));
        jButton10.setFont(new java.awt.Font("Eras Bold ITC", 0, 24)); // NOI18N
        jButton10.setForeground(new java.awt.Color(255, 255, 255));
        jButton10.setText("ADD ITEM");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton10);
        jButton10.setBounds(500, 580, 300, 50);

        jButton17.setBackground(new java.awt.Color(204, 0, 0));
        jButton17.setFont(new java.awt.Font("Eras Bold ITC", 1, 24)); // NOI18N
        jButton17.setForeground(new java.awt.Color(255, 255, 255));
        jButton17.setText("DELETE");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton17);
        jButton17.setBounds(330, 580, 150, 50);

        jButton13.setBackground(new java.awt.Color(0, 0, 200));
        jButton13.setForeground(new java.awt.Color(255, 255, 255));
        jButton13.setText("Update Stock");
        jButton13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton13MousePressed(evt);
            }
        });
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton13);
        jButton13.setBounds(190, 580, 110, 56);

        jTextField2.setEditable(false);
        jTextField2.setBackground(new java.awt.Color(255, 255, 255));
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField2);
        jTextField2.setBounds(50, 580, 100, 60);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 770, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel6);
        jPanel6.setBounds(30, 50, 770, 450);
        jPanel1.add(jLabel4);
        jLabel4.setBounds(100, 20, 150, 0);

        jButton1.setText("refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(680, 530, 73, 25);

        jLabel3.setText("ref");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(0, 0, 830, 710);

        jPanel2.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 102));
        jLabel1.setText("GRAND TOTAL");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(370, 660, 180, 30);

        totalTF.setEditable(false);
        totalTF.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        totalTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        totalTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalTFActionPerformed(evt);
            }
        });
        jPanel2.add(totalTF);
        totalTF.setBounds(280, 610, 360, 40);

        orderTbl.setBackground(new java.awt.Color(255, 102, 255));
        orderTbl.setForeground(new java.awt.Color(255, 255, 255));
        orderTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(orderTbl);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel5);
        jPanel5.setBounds(280, 50, 360, 550);

        jButton15.setBackground(new java.awt.Color(0, 0, 200));
        jButton15.setFont(new java.awt.Font("Eras Bold ITC", 0, 14)); // NOI18N
        jButton15.setForeground(new java.awt.Color(255, 255, 255));
        jButton15.setText("Sales Logs");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton15);
        jButton15.setBounds(150, 470, 120, 100);

        jButton16.setBackground(new java.awt.Color(153, 153, 153));
        jButton16.setFont(new java.awt.Font("Eras Bold ITC", 0, 14)); // NOI18N
        jButton16.setForeground(new java.awt.Color(255, 255, 255));
        jButton16.setText("0ther flavor");
        jPanel2.add(jButton16);
        jButton16.setBounds(20, 470, 120, 100);
        jPanel2.add(jLabel2);
        jLabel2.setBounds(0, 0, 0, 0);

        jButton18.setText("ACCOUNT LOGS");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton18);
        jButton18.setBounds(470, 10, 150, 25);

        jButton2.setBackground(new java.awt.Color(153, 153, 153));
        jButton2.setFont(new java.awt.Font("Eras Bold ITC", 0, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("BEAR CONE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2);
        jButton2.setBounds(20, 50, 120, 100);

        jButton3.setBackground(new java.awt.Color(153, 153, 153));
        jButton3.setFont(new java.awt.Font("Eras Bold ITC", 0, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("GIANT BELGIAN");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3);
        jButton3.setBounds(150, 50, 120, 100);

        chocodipBtn.setBackground(new java.awt.Color(153, 153, 153));
        chocodipBtn.setFont(new java.awt.Font("Eras Bold ITC", 0, 12)); // NOI18N
        chocodipBtn.setForeground(new java.awt.Color(255, 255, 255));
        chocodipBtn.setText("CHOCO DIP");
        chocodipBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chocodipBtnActionPerformed(evt);
            }
        });
        jPanel2.add(chocodipBtn);
        chocodipBtn.setBounds(20, 160, 120, 90);

        dipntoppingsBtn.setBackground(new java.awt.Color(153, 153, 153));
        dipntoppingsBtn.setFont(new java.awt.Font("Eras Bold ITC", 0, 12)); // NOI18N
        dipntoppingsBtn.setForeground(new java.awt.Color(255, 255, 255));
        dipntoppingsBtn.setText("DIP&TOPPINGS");
        dipntoppingsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dipntoppingsBtnActionPerformed(evt);
            }
        });
        jPanel2.add(dipntoppingsBtn);
        dipntoppingsBtn.setBounds(150, 160, 120, 90);

        cokefloatBtn.setBackground(new java.awt.Color(153, 153, 153));
        cokefloatBtn.setFont(new java.awt.Font("Eras Bold ITC", 0, 12)); // NOI18N
        cokefloatBtn.setForeground(new java.awt.Color(255, 255, 255));
        cokefloatBtn.setText("COKE FLOAT");
        cokefloatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cokefloatBtnActionPerformed(evt);
            }
        });
        jPanel2.add(cokefloatBtn);
        cokefloatBtn.setBounds(20, 260, 120, 90);

        chocofloatBtn.setBackground(new java.awt.Color(153, 153, 153));
        chocofloatBtn.setFont(new java.awt.Font("Eras Bold ITC", 0, 12)); // NOI18N
        chocofloatBtn.setForeground(new java.awt.Color(255, 255, 255));
        chocofloatBtn.setText("CHOCO FLOAT");
        chocofloatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chocofloatBtnActionPerformed(evt);
            }
        });
        jPanel2.add(chocofloatBtn);
        chocofloatBtn.setBounds(150, 260, 120, 90);

        coffeefloatBtn.setBackground(new java.awt.Color(153, 153, 153));
        coffeefloatBtn.setFont(new java.awt.Font("Eras Bold ITC", 0, 12)); // NOI18N
        coffeefloatBtn.setForeground(new java.awt.Color(255, 255, 255));
        coffeefloatBtn.setText("COFFEE FLOAT");
        coffeefloatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coffeefloatBtnActionPerformed(evt);
            }
        });
        jPanel2.add(coffeefloatBtn);
        coffeefloatBtn.setBounds(20, 360, 120, 100);

        additionalBtn.setBackground(new java.awt.Color(153, 153, 153));
        additionalBtn.setFont(new java.awt.Font("Eras Bold ITC", 0, 12)); // NOI18N
        additionalBtn.setForeground(new java.awt.Color(255, 255, 255));
        additionalBtn.setText("ADDITIONAL \nTOPPINGS");
        additionalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                additionalBtnActionPerformed(evt);
            }
        });
        jPanel2.add(additionalBtn);
        additionalBtn.setBounds(150, 360, 120, 100);

        jButton8.setBackground(new java.awt.Color(204, 0, 0));
        jButton8.setFont(new java.awt.Font("Eras Bold ITC", 0, 24)); // NOI18N
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setText("PAY");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton8);
        jButton8.setBounds(20, 580, 250, 60);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 830, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void totalTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalTFActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        newitem ni = new newitem();
        ni.sup = this.sup;
        ni.setVisible(true);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        try{
            String sql = "Delete from shiftone where ItemNo = '"+id+"'";
             pst = conn.prepareStatement(sql);
            
            pst.execute(sql);
            adminTable();
            userTable();
            
        }catch(SQLException e){
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
             int row = jTable1.getSelectedRow();
             String click = (jTable1.getModel().getValueAt(row, 0).toString());
             String sql = "select * from shiftone where ItemNo = '"+click+"'";
             pst = conn.prepareStatement(sql);
             rs = pst.executeQuery(sql);
              if(rs.next()){
                  int Identify = rs.getInt("ItemNo");
                 this.id =Identify;
                 
                 ade = rs.getString("ItemIn");
                 jTextField2.setText(ade);
              }
        } catch (SQLException e) {
        }
          
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        add = JOptionPane.showInputDialog("Enter Additional: ");
        ad = Integer.parseInt(add);
        String sql = "UPDATE shiftone set ItemIn = '"+ad+"' where ItemNo = '"+this.id+"'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            pst = conn.prepareStatement(sql);
            pst.executeUpdate(sql);
            
        } catch (Exception e) {
        }
        updateTableone();
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
             String sql1 = "select * from shiftone where ItemNo = '"+this.id+"'";
             pst = conn.prepareStatement(sql1);
             rs = pst.executeQuery(sql1);
              if(rs.next()){
                 String ad = rs.getString("ItemIn");
                 jTextField2.setText(ad);
              }
        } catch (SQLException e) {
        }
        
        
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton13MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton13MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton13MousePressed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
      saleslog sl = new saleslog();
      sl.setVisible(true);
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // TODO add your handling code here:
        Logs ls = new Logs();
        ls.setVisible(true);
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String sql = "SELECT * FROM product where productname = 'bear cone'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(sql);
            rs = st.executeQuery(sql);
            if(rs.next()){
                this.prodNo = rs.getString("productno");
                this.prodName = rs.getString("productname");
                this.prodPrice = rs.getInt("price");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.prodamnt = JOptionPane.showInputDialog("Input Desired Amount");
        this.amnt = Integer.parseInt(prodamnt);
        updateOrder();
        orderTable();
        grandTotal();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String sql = "SELECT * FROM product where productname = 'giant belgian cone'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(sql);
            rs = st.executeQuery(sql);
            if(rs.next()){
                this.prodNo = rs.getString("productno");
                this.prodName = rs.getString("productname");
                this.prodPrice = rs.getInt("price");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.prodamnt = JOptionPane.showInputDialog("Input Desired Amount");
        this.amnt = Integer.parseInt(prodamnt);
        updateOrder();
        orderTable();
        grandTotal();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void chocodipBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chocodipBtnActionPerformed
        String sql = "SELECT * FROM product where productname = 'choco dip'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(sql);
            rs = st.executeQuery(sql);
            if(rs.next()){
                this.prodNo = rs.getString("productno");
                this.prodName = rs.getString("productname");
                this.prodPrice = rs.getInt("price");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.prodamnt = JOptionPane.showInputDialog("Input Desired Amount");
        this.amnt = Integer.parseInt(prodamnt);
        updateOrder();
        orderTable();
        grandTotal();
    }//GEN-LAST:event_chocodipBtnActionPerformed

    private void dipntoppingsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dipntoppingsBtnActionPerformed
        String sql = "SELECT * FROM product where productname = 'Dip & Toppings'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(sql);
            rs = st.executeQuery(sql);
            if(rs.next()){
                this.prodNo = rs.getString("productno");
                this.prodName = rs.getString("productname");
                this.prodPrice = rs.getInt("price");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.prodamnt = JOptionPane.showInputDialog("Input Desired Amount");
        this.amnt = Integer.parseInt(prodamnt);
        updateOrder();
        orderTable();
        grandTotal();
    }//GEN-LAST:event_dipntoppingsBtnActionPerformed

    private void cokefloatBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cokefloatBtnActionPerformed
        String sql = "SELECT * FROM product where productname = 'coke float'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(sql);
            rs = st.executeQuery(sql);
            if(rs.next()){
                this.prodNo = rs.getString("productno");
                this.prodName = rs.getString("productname");
                this.prodPrice = rs.getInt("price");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.prodamnt = JOptionPane.showInputDialog("Input Desired Amount");
        this.amnt = Integer.parseInt(prodamnt);
        updateOrder();
        orderTable();
        grandTotal();
    }//GEN-LAST:event_cokefloatBtnActionPerformed

    private void chocofloatBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chocofloatBtnActionPerformed
        String sql = "SELECT * FROM product where productname = 'choco float'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(sql);
            rs = st.executeQuery(sql);
            if(rs.next()){
                this.prodNo = rs.getString("productno");
                this.prodName = rs.getString("productname");
                this.prodPrice = rs.getInt("price");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.prodamnt = JOptionPane.showInputDialog("Input Desired Amount");
        this.amnt = Integer.parseInt(prodamnt);
        updateOrder();
        orderTable();
        grandTotal();
    }//GEN-LAST:event_chocofloatBtnActionPerformed

    private void coffeefloatBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coffeefloatBtnActionPerformed
        String sql = "SELECT * FROM product where productname = 'coffee float'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(sql);
            rs = st.executeQuery(sql);
            if(rs.next()){
                this.prodNo = rs.getString("productno");
                this.prodName = rs.getString("productname");
                this.prodPrice = rs.getInt("price");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.prodamnt = JOptionPane.showInputDialog("Input Desired Amount");
        this.amnt = Integer.parseInt(prodamnt);
        updateOrder();
        orderTable();
        grandTotal();
    }//GEN-LAST:event_coffeefloatBtnActionPerformed

    private void additionalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_additionalBtnActionPerformed
        String sql = "SELECT * FROM product where productname = 'additional'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(sql);
            rs = st.executeQuery(sql);
            if(rs.next()){
                this.prodNo = rs.getString("productno");
                this.prodName = rs.getString("productname");
                this.prodPrice = rs.getInt("price");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.prodamnt = JOptionPane.showInputDialog("Input Desired Amount");
        this.amnt = Integer.parseInt(prodamnt);
        updateOrder();
        orderTable();
        grandTotal();
    }//GEN-LAST:event_additionalBtnActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        int amount;
        amount = Integer.parseInt(totalTF.getText());
        Date date = java.sql.Date.valueOf(LocalDate.now());
        Time time = java.sql.Time.valueOf(LocalTime.now());
        String summation = "SELECT SUM(quantity) as Summation from `order`";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(summation);
            rs = st.executeQuery(summation);
            if(rs.next()){
                totalQuantity = rs.getInt("Summation");
                System.out.println(totalQuantity);
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String quant = "SELECT quantity, description from `order`";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(quant);
            rs = st.executeQuery(quant);
            while(rs.next()){
                try {
                    quantityIngredients.add(rs.getInt("quantity"));
                    typeIngredients.add(rs.getString("description"));
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, e);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        count();
        
        String sql = "INSERT INTO saleslog values(null, '"+amount+"', '"+date+"', '"+time+"', '"+totalQuantity+"')";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(sql);
            st.executeUpdate(sql);
            JOptionPane.showMessageDialog(null, "THANK YOU");
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        String update = "Update `order` set quantity = 0, amount = 0";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(update);
            st.executeUpdate(update);
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        quantityIngredients.clear();
        typeIngredients.clear();
        orderTable();
        grandTotal();
        updateTableone();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        updateTableone();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed
    private void orderTable(){
        String sql = "SELECT itemno as 'Product Number', description as 'Description', quantity as 'Quantity', amount as 'Price' FROM `order` WHERE quantity != 0";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION,USERNAME_DBCONNECTION,PASSWORD_DBCONNECTION);
            st = conn.createStatement();
            rs = st.executeQuery(sql);
            orderTbl.setModel(DbUtils.resultSetToTableModel(rs));
            orderTbl.revalidate();
            orderTbl.repaint();
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void grandTotal(){
        String sql = "SELECT SUM(amount) as SUM FROM `order`";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(sql);
            rs = st.executeQuery(sql);
            if (rs.next()){
                totalTF.setText(rs.getString("SUM"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void updateOrder(){
        String counting = "Update `order` set quantity = '"+this.amnt+"', amount = '"+this.prodPrice*this.amnt+"' where description = '"+this.prodName+"'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(counting);
            st.executeUpdate(counting);
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void count(){
        for(int i = 0; i<typeIngredients.size(); i++){
            System.out.println(typeIngredients.size());
            String select = "SELECT * FROM ingredients where type = '"+typeIngredients.get(i)+"'";
            try {
                conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
                st = conn.prepareStatement(select);
                rs = st.executeQuery(select);
                if(rs.next()){
                    this.cone = rs.getInt("cone")*quantityIngredients.get(i);
                    this.cup = rs.getInt("cup")*quantityIngredients.get(i);
                    this.cream = rs.getInt("cream")*quantityIngredients.get(i);
                    this.additional = rs.getInt("additional")*quantityIngredients.get(i);
                    this.plasticSpoon = rs.getInt("plasticSpoon")*quantityIngredients.get(i);
                    this.ice = rs.getInt("ice")*quantityIngredients.get(i);
                    this.cup16oz = rs.getInt("cup 16 oz")*quantityIngredients.get(i);
                    this.coke = rs.getInt("coke")*quantityIngredients.get(i);
                    this.domeLid = rs.getInt("dome lid")*quantityIngredients.get(i);
                    this.juiceStraw = rs.getInt("juice straw")*quantityIngredients.get(i);
                    this.tissue = rs.getInt("tissue")*quantityIngredients.get(i);
                    this.coffee = rs.getInt("coffee")*quantityIngredients.get(i);
                    this.choco = rs.getInt("choco")*quantityIngredients.get(i);
                    }
            } catch (SQLException ex) {
                Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
            }
            coneQuantity();
            cupQuantity();
            creamQuantity();
            additionalQuantity();
            pSpoonQuantity();
            iceQuantity();
            c16ozQuantity();
            cokeQuantity();
            dLidQuantity();
            jStrawQuantity();
            tissueQuantity();
            coffeeQuantity();
            chocoQuantity();
            
        }
    }
    private void coneQuantity(){
        String select ="SELECT ItemIn FROM shiftone where ItemName = 'cone'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(select);
            rs = st.executeQuery(select);
            if(rs.next()){
                this.number = rs.getInt("ItemIn");
                this.last = this.number - this.cone;
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        String update = "UPDATE shiftone set ItemIn = '"+this.last+"', Date = '"+java.sql.Date.valueOf(LocalDate.now())+"', Time = '"+java.sql.Time.valueOf(LocalTime.now())+"' where ItemName = 'cone'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(update);
            st.executeUpdate(update);
                conn.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
 
    }
    private void cupQuantity(){
        String select ="SELECT ItemIn FROM shiftone where ItemName = 'cup'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(select);
            rs = st.executeQuery(select);
            if(rs.next()){
                this.number = rs.getInt("ItemIn");
                this.last = this.number - this.cup;
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        String update = "UPDATE shiftone set ItemIn = '"+this.last+"', Date = '"+java.sql.Date.valueOf(LocalDate.now())+"', Time = '"+java.sql.Time.valueOf(LocalTime.now())+"' where ItemName = 'cup'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(update);
            st.executeUpdate(update);
                conn.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
 
    }
    private void creamQuantity(){
                String select ="SELECT ItemIn FROM shiftone where ItemName = 'cream'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(select);
            rs = st.executeQuery(select);
            if(rs.next()){
                this.number = rs.getInt("ItemIn");
                this.last = number - this.cream;
                conn.close();
                System.out.println(this.last);
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        String update = "UPDATE shiftone set ItemIn = '"+this.last+"', Date = '"+java.sql.Date.valueOf(LocalDate.now())+"', Time = '"+java.sql.Time.valueOf(LocalTime.now())+"' where ItemName = 'cream'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(update);
            st.executeUpdate(update);
            
                conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void additionalQuantity(){
        String select ="SELECT ItemIn FROM shiftone where ItemName = 'additional'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(select);
            rs = st.executeQuery(select);
            if(rs.next()){
                this.number = rs.getInt("ItemIn");
                this.last = number - this.additional;
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        String update = "UPDATE shiftone set ItemIn = '"+this.last+"', Date = '"+java.sql.Date.valueOf(LocalDate.now())+"', Time = '"+java.sql.Time.valueOf(LocalTime.now())+"' where ItemName = 'additional'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(update);
            st.executeUpdate(update);
            
                conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void pSpoonQuantity(){
        String select ="SELECT ItemIn FROM shiftone where ItemName = 'plastic spoon'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(select);
            rs = st.executeQuery(select);
            if(rs.next()){
                this.number = rs.getInt("ItemIn");
                this.last = number - this.plasticSpoon;
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        String update = "UPDATE shiftone set ItemIn = '"+this.last+"', Date = '"+java.sql.Date.valueOf(LocalDate.now())+"', Time = '"+java.sql.Time.valueOf(LocalTime.now())+"' where ItemName = 'plastic spoon'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(update);
            st.executeUpdate(update);
                conn.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void iceQuantity(){
        String select ="SELECT ItemIn FROM shiftone where ItemName = 'ice'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(select);
            rs = st.executeQuery(select);
            if(rs.next()){
                this.number = rs.getInt("ItemIn");
                this.last = number - this.ice;
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        String update = "UPDATE shiftone set ItemIn = '"+this.last+"', Date = '"+java.sql.Date.valueOf(LocalDate.now())+"', Time = '"+java.sql.Time.valueOf(LocalTime.now())+"' where ItemName = 'ice'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(update);
            st.executeUpdate(update);
                conn.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void c16ozQuantity(){
        String select ="SELECT ItemIn FROM shiftone where ItemName = 'cup 16 oz'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(select);
            rs = st.executeQuery(select);
            if(rs.next()){
                this.number = rs.getInt("ItemIn");
                this.last = number - this.cup16oz;
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        String update = "UPDATE shiftone set ItemIn = '"+this.last+"', Date = '"+java.sql.Date.valueOf(LocalDate.now())+"', Time = '"+java.sql.Time.valueOf(LocalTime.now())+"' where ItemName = 'cup 16 oz'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(update);
            st.executeUpdate(update);
                conn.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void cokeQuantity(){
        String select ="SELECT ItemIn FROM shiftone where ItemName = 'coke'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(select);
            rs = st.executeQuery(select);
            if(rs.next()){
                this.number = rs.getInt("ItemIn");
                this.last = number - this.coke;
                conn.close();
                System.out.println(this.last);
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        String update = "UPDATE shiftone set ItemIn = '"+this.last+"', Date = '"+java.sql.Date.valueOf(LocalDate.now())+"', Time = '"+java.sql.Time.valueOf(LocalTime.now())+"' where ItemName = 'coke'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(update);
            st.executeUpdate(update);
                conn.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void dLidQuantity(){
        String select ="SELECT ItemIn FROM shiftone where ItemName = 'dome lid'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(select);
            rs = st.executeQuery(select);
            if(rs.next()){
                this.number = rs.getInt("ItemIn");
                this.last = number - this.domeLid;
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        String update = "UPDATE shiftone set ItemIn = '"+this.last+"', Date = '"+java.sql.Date.valueOf(LocalDate.now())+"', Time = '"+java.sql.Time.valueOf(LocalTime.now())+"' where ItemName = 'dome lid'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(update);
            st.executeUpdate(update);
                conn.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void jStrawQuantity(){
        String select ="SELECT ItemIn FROM shiftone where ItemName = 'juice straw'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(select);
            rs = st.executeQuery(select);
            if(rs.next()){
                this.number = rs.getInt("ItemIn");
                this.last = number - this.juiceStraw;
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        String update = "UPDATE shiftone set ItemIn = '"+this.last+"', Date = '"+java.sql.Date.valueOf(LocalDate.now())+"', Time = '"+java.sql.Time.valueOf(LocalTime.now())+"' where ItemName = 'juice straw'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(update);
            st.executeUpdate(update);
                conn.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void tissueQuantity(){
        String select ="SELECT ItemIn FROM shiftone where ItemName = 'tissue'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(select);
            rs = st.executeQuery(select);
            if(rs.next()){
                this.number = rs.getInt("ItemIn");
                this.last = number - this.tissue;
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        String update = "UPDATE shiftone set ItemIn = '"+this.last+"', Date = '"+java.sql.Date.valueOf(LocalDate.now())+"', Time = '"+java.sql.Time.valueOf(LocalTime.now())+"' where ItemName = 'tissue'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(update);
            st.executeUpdate(update);
                conn.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void coffeeQuantity(){
        String select ="SELECT ItemIn FROM shiftone where ItemName = 'coffee'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(select);
            rs = st.executeQuery(select);
            if(rs.next()){
                this.number = rs.getInt("ItemIn");
                this.last = number - this.coffee;
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        String update = "UPDATE shiftone set ItemIn = '"+this.last+"', Date = '"+java.sql.Date.valueOf(LocalDate.now())+"', Time = '"+java.sql.Time.valueOf(LocalTime.now())+"' where ItemName = 'coffee'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(update);
            st.executeUpdate(update);
                conn.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void chocoQuantity(){
        String select ="SELECT ItemIn FROM shiftone where ItemName = 'choco'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(select);
            rs = st.executeQuery(select);
            if(rs.next()){
                this.number = rs.getInt("ItemIn");
                this.last = number - this.choco;
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        String update = "UPDATE shiftone set ItemIn = '"+this.last+"', Date = '"+java.sql.Date.valueOf(LocalDate.now())+"', Time = '"+java.sql.Time.valueOf(LocalTime.now())+"' where ItemName = 'choco'";
        try {
            conn = DriverManager.getConnection(URL_DBCONNECTION, USERNAME_DBCONNECTION, PASSWORD_DBCONNECTION);
            st = conn.prepareStatement(update);
            st.executeUpdate(update);
            
                conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(mainframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
//    int cone, cup, cream, additional, plasticSpoon, ice, cup16oz, coke, domeLid, juiceStraw, tissue, coffee, choco;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainframe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton additionalBtn;
    private javax.swing.JButton chocodipBtn;
    private javax.swing.JButton chocofloatBtn;
    private javax.swing.JButton coffeefloatBtn;
    private javax.swing.JButton cokefloatBtn;
    private javax.swing.JButton dipntoppingsBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton13;
    public javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    public javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTable orderTbl;
    private javax.swing.JTextField totalTF;
    // End of variables declaration//GEN-END:variables
}
